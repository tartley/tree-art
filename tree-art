#!/usr/bin/env python3
from dataclasses import dataclass
from math import cos, sin, tau
from random import random
import drawsvg as d

T4 = tau / 4
T8 = tau / 8
T16 = tau / 16
T32 = tau / 32

@dataclass
class V2:
    x:float|int
    y:float|int

    def offset(self, angle, distance):
        return V2(
            self.x + distance * cos(angle),
            self.y - distance * sin(angle),
        )

    def __iter__(self):
        yield self.x
        yield self.y

Display = V2(1920, 1080)

def sky():
    sky = d.LinearGradient(0, 0, 0, Display.y)
    sky.add_stop(0, '#38f')
    sky.add_stop(1, '#bdf')
    return d.Rectangle(0, 0, Display.x, Display.y, fill=sky)

def tree(start, direction=T4, length=300, width=100):
    if width < 0.125:
        return
    s1 = start.offset(direction - T4, width)
    s2 = start.offset(direction + T4, width)
    end = start.offset(direction, length)
    e1 = end.offset(direction - T4, width * 2/3)
    e2 = end.offset(direction + T4, width * 2/3)
    yield d.Lines(
        *s1, *s2, *e2, *e1,
        close=True,
        fill='#210',
        stroke='invis',
    )
    yield from tree(
        end,
        direction - (T32 + random() * T8),
        length=length*(1/2 + random() / 2),
        width=width * 2/3
    )
    yield from tree(
        end,
        direction + (T32 + random() * T8),
        length=length*(1/2 + random() * 2/4),
        width=width * 2/3,
    )

def get_items():
    yield sky()
    yield from tree(V2(Display.x / 2, Display.y))

def main():
    drawing = d.Drawing(Display.x, Display.y)
    for item in get_items():
        drawing.append(item)
    drawing.save_svg('tree-art.svg')


if __name__ == '__main__':
    main()

